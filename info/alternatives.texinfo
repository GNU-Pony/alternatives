\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename alternatives.info
@settitle alternatives
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header


@dircategory System
@direntry
* alternatives: (alternatives).      Simple tool for administrating /etc/alternatives
@end direntry


@copying
Copyright @copyright{} 2014 Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top alternatives -- Simple tool for administrating /etc/alternatives
@insertcopying
@end ifnottex

@titlepage
@title alternatives
@subtitle Simple tool for administrating /etc/alternatives
@author by Mattias Andrée (maandree)

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents



@menu
* Overview::                        Brief overview of @command{alternatives}.
* Invoking::                        Invocation of @command{alternatives}.
* Rationale::                       Rationale for @command{alternatives}.
* GNU Free Documentation License::  Copying and sharing this manual.
@end menu



@node Overview
@chapter Overview

@command{alternatives} is a simple tool for administrating
@file{/etc/alternatives} using the GNU/Pony filesystem hierarchy.
This lets you select which package that should provide at
specific command. Some commands, such as @command{sh}, can be
provided by multiple packages. For example, @command{bash} can
be executed as @command{sh}, in which case it will restrict it
self to POSIX, but other packages such as @command{dash} can
also be used. @command{alternatives} uses the alternatives
mechanism built into the filesystem hierarchy to let you select
which package to use.

Commands @footnote{Commands are most common, but there are not
actual limitations} in directories such as @file{/bin} and
@file{/usr/bin} can be installed by multiple packages as symbolic
links (provided thatt hey are identical). Such links points to
files with the same base name in @file{/etc/alternatives}. Those
files are symbolic links setup either manually using
@command{alternatives} or automatically by the package manager.
These symbolic links can point to the command that actually
provide the symbolic command. However, they should point to
such symbolic links in @file{/etc/alternatives.providers}.
@file{/etc/alternatives.providers} is a directory populated
with possible providers for symbolic commands. This directory
contains directories named as the symbolic commands, each of
these directories contains symlinks named as packages the
can provide the command and points to that package's implementation
of the commnad.



@node Invoking
@chapter Invoking

@command{alternatives} can be invoked in a few ways:

@table @command

@item alternatives list
List all symbolic commmands that can be configured.

@item alternatives list COMMAND
List all packages that can provide the specified symbolic command.

@item alternatives get COMMAND
Get which package and executable that provides symbolic command.

@item alternatives set COMMAND PROVIDER
Set which package that should provide a symbolic command.

@item alternatives help
@itemx alternatives --help
@itemx alternatives -help
@itemx alternatives -h
Print information about how to use @command{alternatives}.

@item alternatives version
@itemx alternatives --version
@itemx alternatives -version
@itemx alternatives -v
Print the name of the program and the installed version.

@item alternatives copying
@itemx alternatives --copying
@itemx alternatives -copying
@itemx alternatives -c
Print the copyright notice.

@end table

If successful, @command{alternatives} exits with the
value zero, but on failure it can return either of:

@table @asis
@item 1
An expected file did not exist.
@item 2
A required symbolic link is broked.
@item 3
A required file exists but is not a symbolic link.
@item 4
An unknown error has occurred.
@item 5
@command{alternatives} was not invoked correctly.
@end table



@node Rationale
@chapter Rationale

Some commands, especially those from Unix, do not have their
own implementations but are instead provided by other programs.
These commands [without their own implementions] are called
symbolic commands. A popular example of a symbolic ommand is
@command{sh}. @command{sh} is a very limited shell, it can be
provided by the much more powerful shell @command{bash} by
symbolically (symlinking) @file{/bin/sh} to @file{/bin/bash},
and @command{bash} will limit itself to POSIX when invoked as
@command{sh}. But @command{sh} can also be provided by
@command{dash} which not as powerful as @command{bash} but
is much faster and uses less memory.

Limiting ourself to @command{bash} and @command{dash} gives
us two different options for @command{sh} that are suited for
different needs. Symlinking @file{/bin/sh} to @file{/bin/bash}
is better for a minimal installation where @command{dash} does
not need to be installed. Symlinking @file{/bin/sh} to
@file{/bin/dash}, however, is better for a performance or
footprint optimised installation where many shell programs
will run faster and with less memory usage.

To solve this without just selecting for you, GNU/Pony
implements an alternatives mechanism. By default (since
@command{bash} is required by @command{dash} is not)
@command{sh} is provided by @command{bash}, To let you
easily configure this @file{/bin/sh} is a symlink pointing
to @file{/etc/alternatives/sh} which can be configures to
point to the command you want to provide @command{sh}.
But to make it easier and to allow the package manager to
automatically configure this when the used provider is
uninstalled or the symbolic link is first installed,
@file{/etc/alternatives/sh} points to
@file{/etc/alternatives.providers/sh/bash}. Where @file{sh}
(in both @file{/etc/alternatives} and
@file{/etc/alternatives.providers}) is the symbolic command,
and @file{bash} is the name of the package, not the command,
that can provide the symbolic command, and points the that
packages implementation of the command.

So far we have only taked about commands, but the alternatives
mechanism can be used on anything, for example man pages. But
not only that, it can be used on directories which would let
you configure many related files simultaneously. One could be
tempated to use this the configure which version of a program
to use, for example make it possible to select whether
@command{python} is Python 2 or Python 3, or whether
@command{java} is Java 6 or Java 7, but that is a mistake.
Doing so causes confusion where you cannot be sure how a
command will behave. But it could also mean that a running
program can run into problems because files it will use
but have not yet loaded are modified because the user chooses
to change which version, that may not be backwards compatible,
to use. Different versions of the same program should have
different commands.



@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo

@bye

